#+TITLE: My Emacs Configuration
#+AUTHOR: Per Salomonsen (belegaps)

* About This Config

This is my personal Emacs configuration.  I'm beginning to discover
Emacs from scratch, so I'm expecting this configuration to evolve over
the coming months and years.

I was suggested installing the Doom Emacs distribution and did so at
first, but reverted to a scratch install in order to be more in line
with the basic tutorials (and because I'm the prototypical
yak-shaver), but at some point I might go back to a distribution.  Who
knows?

I picked up the idea of using a ~.org~ file for the main Emacs
configuration from Derek Taylor[fn:1], which seems like a good idea.
I was already curious about the concept of literal programming from
Haskell, so this fit like a glove.

* Enabling This Configuration File

The only thing needed in ~init.el~ is the following statement to
extract the source code snippets from this file and execute them:

#+begin_example
(org-babel-load-file
 (expand-file-name
  "config.org"
  user-emacs-directory))
#+end_example

Beware, though, that initialization will fail if /this/ file doesn't
contain at least one ~#+begin_src~ section.  This is because the
~org-babel-tangle~ function won't generate an ~.el~ file if there are
no source code sections in this file and, subsequent, the ~load-file~
function will fail because it cannot find the file.

* Initial Config

Set up the ~exec-path~ to ensure that Homebrew paths and the user ~bin~
directory are included so Emacs can execute local applications even
when Emacs is launched from the GUI.

#+begin_src emacs-lisp
  (defvar brew-prefix "/opt/homebrew"
    "The path prefix for applications installed by Homebrew")
  (defvar brew-paths '("bin"
		       "opt/gnu-sed/libexec/gnubin"
		       "opt/coreutils/libexec/gnubin")
    "The Homebrew paths to include in EXEC-PATH")

  (let* ((user-bin-path (expand-file-name "bin" (getenv "HOME")))
	 (paths (cons user-bin-path
		      (mapcar (lambda (p) (expand-file-name p brew-prefix))
			      brew-paths))))
    (dolist (path paths)
      (add-to-list 'exec-path path))
    (setenv "PATH" (mapconcat 'identity exec-path ":")))
#+end_src

The code defines two variables: ~brew-prefix~, which is the prefix path
for Homebrew installed applications, and ~brew-paths~, which are the
Homebrew sub-paths that contains command line tools.

Next, the code updates ~exec-path~ to include any of the custom
directories that are not already there and re-sets the "PATH"
environment variable from that.

* Configure Package Repositories

The Emacs package system needs at least one repository from which to
install packages.  The following code adds both ~melpa~ and
~melpa-stable~ to the list and initialize the package system.

#+begin_src emacs-lisp -n
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages") t)
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src

** ~use-package~

~use-package~ seems to be the thing to use.

#+begin_src emacs-lisp
  ;; Enable use-package when loading
  (eval-when-compile
    (require 'use-package))
#+end_src

Configure ~use-package~ to always download the package when first
used:

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

This relieves us from adding ~:ensure t~ to all ~use-package~
statements.

* User Interface

A couple of things different from the stock configuration.  First,
remove the toolbar and scroll bar.  Maybe I'm just too used to the
ViM experience.  Anyway, it takes away window real estate.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Next, set the default frame size, when starting up.  This is just
based on my default terminal window size and should probably change in
the future, as I always resize the frame anyway--and position it
somewhere specifically.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(height . 43))
  (add-to-list 'default-frame-alist '(width . 132))
#+end_src

** Customization

Move the customization variables to a separate file.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

** MacOS Danish Keyboard Bindings

Emacs performs low-level keyboard interaction, which is good (who
needs to enter '∂', '∆', or '¬' characters anyway), but there are a
collection of keyboard combinations that I'm used to and cannot do
without.

The following snippet sets the mappings that I absolutely needs, when
doing programming:

#+begin_src emacs-lisp +n 1
  (global-set-key (kbd "M-(") "{")
  (global-set-key (kbd "M-)") "}")
  (global-set-key (kbd "M-8") "[")
  (global-set-key (kbd "M-9") "]")
  (global-set-key (kbd "M-'") "@")
  (global-set-key (kbd "M-i") "|")
  (global-set-key (kbd "M-/") "\\")
#+end_src

** Theme

I favor the "nord" theme across all my applications, whenever
possible.  Allow the theme to be loaded.  The hash value(s) listed are
the SHA256 digest of the theme files (~nord-theme.el~ for instance).
~default~ is a marker for the default themes distributed with emacs.

#+begin_src emacs-lisp
  (setq custom-safe-themes
	'("197cefea731181f7be51e9d498b29fb44b51be33484b17416b9855a2c4243cb1"
	  default))
#+end_src

It is necessary to recalculate the hash value(s) when updating the
themes to new versions.

Load the theme with confirmation disabled (for now):

#+begin_src emacs-lisp
  (load-theme 'nord t)
  (enable-theme 'nord)
#+end_src

Then increase the default font size to let the old folks read it as
well:

#+begin_src emacs-lisp
  (custom-theme-set-faces 'user '(default ((t (:height 150)))))
#+end_src

** Line numbers

Show column number in status line and enable in-buffer line numbers
globally:

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src

In some buffers, though, it's a little weird with line numbers, so
disable those:

#+begin_src emacs-lisp
  (dolist (mode '(eshell-mode-hook
		  org-mode-hook
		  term-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** n00b Help

Use the ~which-key~ package to display list of possible keys following
a prefix key:

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :diminish
    which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

* Counsel, Ivy, and Swiper

Installing ~counsel~ will pull in ~ivy~ and ~swiper~ as well.

#+begin_src emacs-lisp
  (use-package counsel
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1)
    :bind (("C-s" . swiper-isearch)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("M-y" . counsel-yank-pop)
	   ("C-c v" . ivy-push-view)
	   ("C-c V" . ivy-pop-view)))
#+end_src

* $EDITOR

I have configured Emacs as my default editor for command line tools,
like ~git~, using the ~$EDITOR~ environment variable, in ~.zshrc~:

#+begin_src shell-script
# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='emacsclient'
fi
#+end_src

When logging into the machine over SSH, it uses ~ViM~, but for local
connections, the ~emacsclient~.

The way that works is that, for instance, ~git~ executes ~emacsclient~
with the name of a file containing the commit message for editing and
once that's done, I have to execute the ~server-edit~ function in
Emacs to notify the client that editing is done.

By default, that function is bound to ~C+x #~, which on a danish
keyboard requires pressing ~C-x S-3~.  /That/ sequence does not
preserve tempo, so the following snippet adds a second sequence for
the function, one that doesn't require changing from Ctrl to Shift:

#+begin_src emacs-lisp
  ;; Alternative to "C-x #" to keep editing tempo
  (global-set-key (kbd "C-x C-3") 'server-edit)
#+end_src

# Client/server Mode

Of course, configuring CLI tools to use ~emacsclient~ requires that
the Emacs application starts a server (creates a server socket).  The
following function call does exactly that:

#+begin_src emacs-lisp
  (server-start)
#+end_src

Along with configuring ~Emacs.app~ to launch at login, this ensures
that the editor is always available.

** TODO Consider adding options (-a, -n) to ~$EDITOR~

Adding the '-a <app>' option to ~$EDITOR~ would tell it to start a
different program if ~Emacs.app~ isn't running.  And, adding '-n'
would cause ~Emacs.app~ to open a new frame for the editor.  (I'm not
entirely sold on that idea though.)

* Projects

** Projectile

The projectile package adds features for working with "projects", for
instance project management and navigation.

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (setq projectile-known-projects-file
	  (expand-file-name "transient/projectile-bookmarks.eld" user-emacs-directory))
    (setq projectile-project-search-path
	  '(("~/work/Projects" . 2) "~/Private/Projects" "~/Private/Scratches" "~/.emacs.d"))
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("s-p" . projectile-command-map)
		("C-c p" . projectile-command-map)))
#+end_src

The ~:init~ section sets the ~projectile-known-projects-file~ to a
file in the ~.emacs.d/transient~ directory, because that directory
already is listed in ~.gitignore~ and I don't want the known projects
list in version control (it's probably only relevant per computer
anyway).

It also defines the search path for projects to include both work and
private projects.

And, finally, it turns on ~projectile-mode~.

** Recent Files

Projectile includes a key binding (~M-p e~) for showing recent files,
but it requires ~recentf-mode~ to be enabled, so let's do that:

#+begin_src emacs-lisp
  (use-package recentf
    :init
    (setq recentf-save-file
	  (expand-file-name "transient/recentf" user-emacs-directory))
    (recentf-mode +1)
    :bind
    ("s-e" . counsel-recentf))
#+end_src

This ensures ~recentf~ is loaded, configures the location of the recent
files file, turns on ~recentf-mode~ and adds a Super-E (Cmd-E) key
binding, which I'm used to from IDEs.

** File Finding

To help functionality in ~projectile~ I installed the ~ripgrep~ and ~fd~ tools.

#+begin_src shell
  $ brew install ripgrep fd
#+end_src

And add the ~projectile-ripgrep~ package to enable the
~projectile-ripgrep~ command.

#+begin_src emacs-lisp
  (use-package projectile-ripgrep)
#+end_src

* Bug References

The ~bug-reference-mode~ generates an overlay in the editor, when the
file contains references to issues.  For now, it is enabled on
~org-mode~ using:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'bug-reference-mode)
#+end_src

In order to configure it, we need to set the
~bug-reference-bug-regexp~ and ~bug-reference-url-format~ variables.
One is a regular expression to recognise issue tokens, the other is
the format for generating the URL of the link.

But with different trackers used in different projects, I'll configure
those variables as per-directory local variables.  Since we're using
JIRA at work, I'll put a ~.dir-locals.el~ file at the base of the
directory used for work and configure the variables in there:

#+begin_example
  ((org-mode . (
     (bug-reference-bug-regexp . "\\b\\(\\([A-Za-z][A-Za-z0-9]\\{1,10\\}-[0-9]+\\)\\)")
     (bug-reference-url-format . "https://<jira-server>/browse/%s"))))
#+end_example

* Org Mode

Configuring ~org-mode~ improves readability (in Emacs) of .org files.
The initial setup is inspired by Diego Zamboni's article on beatifying
Org mode[fn:2].

** Markup

First, hide emphasis markers for /italic/, *bold*, =verbatim=, ~code~, and
_underlined_ text (and, "if you must"[fn:3], +strike-through+).

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

** Lists

Next, change the display of list bullets to a centered dot:

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
			'(("^ *\\([-]\\) " (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

I don't know if this works with nested lists or if nested lists are
supported.

** Headers

Add (better) bullets for headers:

#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

And set the font (and size) of headers:

#+begin_src emacs-lisp
  (let* ((variable-tuple
	(cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
	      ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
	      ((x-list-fonts "PT Sans")         '(:font "PT Sans"))
	      ((x-list-fonts "Verdana")         '(:font "Verdana"))
	      ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
	      (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src

* Modes

~feature-mode~ adds support for editing Cucumber/gherkin files.

#+begin_src emacs-lisp
  (use-package feature-mode
    :init
    (setq feature-default-language "fi")
    :config
    (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode)))
#+end_src

* Footnotes

[fn:1] Derek Taylor runs the [[https://www.youtube.com/c/DistroTube][DistroTube]] channel on YouTube.  His
configuration can be found on [[https://gitlab.com/dwt1/dotfiles][GitLab]].

[fn:2] Diego Zamboni runs the website [[https://zzamboni.org][zamboni.org]] and the initial
configurations for my own Org mode are taken from the article
[[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]].

[fn:3]  The quote is from [[https://orgmode.org/org.html#Emphasis-and-Monospace][The Org manual]], where not much love is lost
for strikethrough.
